use dyon;
use falcon;
use std::path::Path;
use std::sync::{Arc, Mutex};


fn load_falcon() -> Option<dyon::Module> {
    use dyon::*;
    use falcon::*;

    let mut module = Module::new();

    module.add(Arc::new("Elf::new".into()), elf_new, Dfn {
        lts: vec![],
        tys: vec![],
        ret: Type::Any
    });

    Some(module)
}


dyon_fn! {
    fn elf_new(bytes: Vec<u8>) -> dyon::RustObject {
        let elf = falcon::loader::elf::Elf::new(bytes);
        Arc::new(Mutex::new(elf)) as dyon::RustObject
    }
}



pub fn run(script: &str) {
    let mut dyon_runtime = dyon::Runtime::new();


}